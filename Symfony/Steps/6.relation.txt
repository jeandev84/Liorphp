RELATION ENTRE LES TABLES :

=======================================================
CATEGORY ENTITY ( Une Categorie aura plusieurs articles)

$ bin/console make:entity

Class name of the entity to create or update (e.g. AgreeablePizza):
> Category

created: src/Entity/Category.php
created: src/Repository/CategoryRepository.php

Entity generated! Now let's add some fields!
You can always add more fields later manually or by re-running this command.

New property name (press <return> to stop adding fields):
> title

Field type (enter ? to see all types) [string]:
>

Field length [255]:
>

Can this field be null in the database (nullable) (yes/no) [no]:
>

updated: src/Entity/Category.php

Add another property? Enter the property name (or press <return> to stop adding fields):
> description

Field type (enter ? to see all types) [string]:
> text

Can this field be null in the database (nullable) (yes/no) [no]:
> yes

updated: src/Entity/Category.php

Add another property? Enter the property name (or press <return> to stop adding fields):
> articles

Field type (enter ? to see all types) [string]:
> ?

Main types
* string
* text
* boolean
* integer (or smallint, bigint)
* float

Relationships / Associations
* relation (a wizard ðŸ§™ will help you build the relation)
* ManyToOne
* OneToMany
* ManyToMany
* OneToOne

Array/Object Types
* array (or simple_array)
* json
* object
* binary
* blob

Date/Time Types
* datetime (or datetime_immutable)
* datetimetz (or datetimetz_immutable)
* date (or date_immutable)
* time (or time_immutable)
* dateinterval

Other Types
* decimal
* guid
* json_array


Field type (enter ? to see all types) [string]:
> relation

What class should this entity be related to?:
> Article

What type of relationship is this?
------------ -----------------------------------------------------------------------
Type         Description
------------ -----------------------------------------------------------------------
ManyToOne    Each Category relates to (has) one Article.
           Each Article can relate to (can have) many Category objects

OneToMany    Each Category can relate to (can have) many Article objects.
           Each Article relates to (has) one Category

ManyToMany   Each Category can relate to (can have) many Article objects.
           Each Article can also relate to (can also have) many Category objects

OneToOne     Each Category relates to (has) exactly one Article.
           Each Article also relates to (has) exactly one Category.
------------ -----------------------------------------------------------------------

Relation type? [ManyToOne, OneToMany, ManyToMany, OneToOne]:
> OneToMany

A new property will also be added to the Article class so that you can access and set the related Category object from it.

New field name inside Article [category]:
>

Is the Article.category property allowed to be null (nullable)? (yes/no) [yes]:
> no

Do you want to activate orphanRemoval on your relationship?
A Article is "orphaned" when it is removed from its related Category.
e.g. $category->removeArticle($article)

NOTE: If a Article may *change* from one Category to another, answer "no".

Do you want to automatically delete orphaned App\Entity\Article objects (orphanRemoval)? (yes/no) [no]:
>

updated: src/Entity/Category.php
updated: src/Entity/Article.php

Add another property? Enter the property name (or press <return> to stop adding fields):
>



Success!


Next: When you're ready, create a migration with make:migration

=============================================================================
CREATE MIGRATION FILE
$ bin/console make:migration

  Success!


 Next: Review the new migration "src/Migrations/Version20200301034948.php"
 Then: Run the migration with php bin/console doctrine:migrations:migrate
 See https://symfony.com/doc/current/bundles/DoctrineMigrationsBundle/index.html

=============================================================================
Migrate :
$ bin/console doctrine:migrations:migrate

                    Application Migrations


WARNING! You are about to execute a database migration that could result in schema changes and data loss. Are you sure you wish to continue? (y/n)y
Migrating up to 20200301034948 from 20200229225730

  ++ migrating 20200301034948

     -> CREATE TABLE category (id INT AUTO_INCREMENT NOT NULL, title VARCHAR(255) NOT NULL, description LONGTEXT DEFAULT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
     -> ALTER TABLE article ADD category_id INT NOT NULL
     -> ALTER TABLE article ADD CONSTRAINT FK_23A0E6612469DE2 FOREIGN KEY (category_id) REFERENCES category (id)
     -> CREATE INDEX IDX_23A0E6612469DE2 ON article (category_id)

  ++ migrated (took 179.9ms, used 16M memory)

  ------------------------

  ++ finished in 187.9ms
  ++ used 16M memory
  ++ 1 migrations executed
  ++ 4 sql queries

======================================================================================
COMMENT ENTITY : (Plusieurs commentaires vont appartenir a Un article)
$ bin/console make:entity

 Class name of the entity to create or update (e.g. VictoriousJellybean):
 > Comment

 created: src/Entity/Comment.php
 created: src/Repository/CommentRepository.php

 Entity generated! Now let's add some fields!
 You can always add more fields later manually or by re-running this command.

 New property name (press <return> to stop adding fields):
 > author

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 >

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Comment.php

 Add another property? Enter the property name (or press <return> to stop adding fields):
 > content

 Field type (enter ? to see all types) [string]:
 > text

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Comment.php

 Add another property? Enter the property name (or press <return> to stop adding fields):
 > createdAt

 Field type (enter ? to see all types) [datetime]:
 >

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Comment.php

 Add another property? Enter the property name (or press <return> to stop adding fields):
 > article

 Field type (enter ? to see all types) [string]:
 > relation

 What class should this entity be related to?:
 > Article

What type of relationship is this?
 ------------ ----------------------------------------------------------------------
  Type         Description
 ------------ ----------------------------------------------------------------------
  ManyToOne    Each Comment relates to (has) one Article.
               Each Article can relate to (can have) many Comment objects

  OneToMany    Each Comment can relate to (can have) many Article objects.
               Each Article relates to (has) one Comment

  ManyToMany   Each Comment can relate to (can have) many Article objects.
               Each Article can also relate to (can also have) many Comment objects

  OneToOne     Each Comment relates to (has) exactly one Article.
               Each Article also relates to (has) exactly one Comment.
 ------------ ----------------------------------------------------------------------

 Relation type? [ManyToOne, OneToMany, ManyToMany, OneToOne]:
 > ManyToOne

 Is the Comment.article property allowed to be null (nullable)? (yes/no) [yes]:
 > no

 Do you want to add a new property to Article so that you can access/update Comment objects from it - e.g. $article->getComments()? (yes/no) [yes]:
 >

 A new property will also be added to the Article class so that you can access the related Comment objects from it.

 New field name inside Article [comments]:
 >

 Do you want to activate orphanRemoval on your relationship?
 A Comment is "orphaned" when it is removed from its related Article.
 e.g. $article->removeComment($comment)

 NOTE: If a Comment may *change* from one Article to another, answer "no".

 Do you want to automatically delete orphaned App\Entity\Comment objects (orphanRemoval)? (yes/no) [no]:
 > yes

 updated: src/Entity/Comment.php
 updated: src/Entity/Article.php

 Add another property? Enter the property name (or press <return> to stop adding fields):
 >



  Success!


 Next: When you're ready, create a migration with make:migration

==========================================================
$ bin/console make:migration


Success!


Next: Review the new migration "src/Migrations/Version20200301040533.php"
Then: Run the migration with php bin/console doctrine:migrations:migrate
See https://symfony.com/doc/current/bundles/DoctrineMigrationsBundle/index.html

$ bin/console doctrine:migrations:migrate

                    Application Migrations


WARNING! You are about to execute a database migration that could result in schema changes and data loss. Are you sure you wish to continue? (y/n)y
Migrating up to 20200301040533 from 20200301034948

  ++ migrating 20200301040533

     -> CREATE TABLE comment (id INT AUTO_INCREMENT NOT NULL, article_id INT NOT NULL, author VARCHAR(255) NOT NULL, content LONGTEXT NOT NULL, created_at DATETIME NOT NULL, INDEX IDX_9474526C7294869C (article_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
     -> ALTER TABLE comment ADD CONSTRAINT FK_9474526C7294869C FOREIGN KEY (article_id) REFERENCES article (id)

  ++ migrated (took 84.5ms, used 16M memory)

  ------------------------

  ++ finished in 88ms
  ++ used 16M memory
  ++ 1 migrations executed
  ++ 2 sql queries
=====================================================================
